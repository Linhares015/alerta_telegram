<?xml version="1.0" encoding="UTF-8"?>
<pipeline>
  <info>
    <name>monta_dados</name>
    <name_sync_with_filename>Y</name_sync_with_filename>
    <description/>
    <extended_description/>
    <pipeline_version/>
    <pipeline_type>Normal</pipeline_type>
    <parameters>
    </parameters>
    <capture_transform_performance>N</capture_transform_performance>
    <transform_performance_capturing_delay>1000</transform_performance_capturing_delay>
    <transform_performance_capturing_size_limit>100</transform_performance_capturing_size_limit>
    <created_user>-</created_user>
    <created_date>2024/09/24 09:39:23.194</created_date>
    <modified_user>-</modified_user>
    <modified_date>2024/09/24 09:39:23.194</modified_date>
  </info>
  <notepads>
  </notepads>
  <order>
    <hop>
      <from>Table input</from>
      <to>JavaScript</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <transform>
    <name>JavaScript</name>
    <type>ScriptValueMod</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <optimizationLevel>9</optimizationLevel>
    <jsScripts>
      <jsScript>
        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>var URL = "https://api.telegram.org/bot7449464408:AAHZoNNgz7cDqvcgD-k_IdpHNy71z32kUmo/sendMessage";
var CHAT_ID = "-4557730528";
var TEXT = mensagem;  // Campo que vem do step anterior

// Configuração para a requisição POST
var data = {
    "chat_id": CHAT_ID,
    "text": TEXT,
    "disable_notification": true
};

// Transformar o objeto em JSON
var jsonData = JSON.stringify(data);

// Criar conexão HTTP
var connection = new java.net.URL(URL).openConnection();
connection.setDoOutput(true);
connection.setRequestMethod("POST");
connection.setRequestProperty("Content-Type", "application/json");

// Enviar os dados
var outputStream = new java.io.OutputStreamWriter(connection.getOutputStream());
outputStream.write(jsonData);
outputStream.flush();
outputStream.close();

// Capturar a resposta
var responseCode = connection.getResponseCode();
if (responseCode == 200) {
    var reader = new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream()));
    var responseLine;
    var response = "";
    while ((responseLine = reader.readLine()) != null) {
        response += responseLine;
    }
    reader.close();
    println("Mensagem enviada com sucesso: " + response);
} else {
    println("Falha ao enviar a mensagem. Código de resposta: " + responseCode);
}

connection.disconnect();</jsScript_script>
      </jsScript>
    </jsScripts>
    <fields>    </fields>
    <attributes/>
    <GUI>
      <xloc>384</xloc>
      <yloc>192</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Table input</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>DW_develop</connection>
    <execute_each_row>N</execute_each_row>
    <limit>0</limit>
    <sql>SELECT top 1
Id
, concat(
	case
		when Subject like '%APLICACAO%' then 'Aplicacao com o seguinte erro: '
		else 'Banco de dados com o seguinte erro: '
	end
	, Body
	) as mensagem
from develop.dbo.alerta_telegram
where id = ${MINIMO}
</sql>
    <variables_active>Y</variables_active>
    <attributes/>
    <GUI>
      <xloc>192</xloc>
      <yloc>192</yloc>
    </GUI>
  </transform>
  <transform_error_handling>
  </transform_error_handling>
  <attributes/>
</pipeline>
